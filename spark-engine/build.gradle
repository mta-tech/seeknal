// https://semver.org/
def majorVersion = 1
def minorVersion = 0
def patchVersion = 0
def groupIdName = "tech.mta"
def artifactName = "spark-engine"

group "${groupIdName}"
version "${majorVersion}.${minorVersion}.${patchVersion}"

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
            allowInsecureProtocol = true
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1"
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath "org.scoverage:gradle-scoverage:7.0.1"
        classpath "ch.epfl.scala:gradle-bloop_2.12:1.5.3"
    }
}

allprojects {
  // test is for compatibility with Metals import
  if (!plugins.hasPlugin("bloop")) {
    apply plugin: "bloop"
  }
}

repositories {
    jcenter()
    mavenCentral()
    maven {
      url "http://packages.confluent.io/maven/"
      allowInsecureProtocol = true
    }
    maven {
        url "https://sparkjobserver.jfrog.io/artifactory/jobserver/"
        allowInsecureProtocol = true
    }
    maven {
        url "https://repos.spark-packages.org"
        allowInsecureProtocol = true
    }
    maven {
        url "https://repo1.maven.org/maven2/"
        allowInsecureProtocol = true
    }
}

apply plugin: "idea"
apply plugin: "scala"
apply plugin: "scalaStyle"
apply plugin: "com.github.johnrengelman.shadow"
//apply plugin: "org.scoverage"
//apply plugin: "maven"
apply plugin: "maven-publish"

scalaStyle {
    configLocation = "scalastyle-config.xml"
    source = "src"
}

// available patches for different spark version
// files in the specific folder will be included in the sources to handle different
// behaviour for different spark version
def sparkPatchVersions = ["3.2", "3.4", "3.5"]
def shortSparkVersion = "${sparkVersion[0]}.${sparkVersion[2]}"
sparkPatchVersions.each { sparkPatchVersion ->
    if (sparkVersion == sparkPatchVersion || shortSparkVersion == sparkPatchVersion) {
        sourceSets.properties.asMap.each {
            it.value.scala.srcDirs += file("src/main/scala-spark-$sparkPatchVersion")
        }
    }
}

sourceCompatibility = "${javaVersion}"

wrapper {
    gradleVersion = "${gradleVersion}"
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

shadowJar {
    zip64 true
    baseName = project.name
    // relocate shapeless to avoid conflict when using spark 2.1
    // https://github.com/circe/circe/issues/713
    relocate "shapeless", "shadow.shapeless"
    // spark mllib is using different cats kernel version and spark libs take precedence so version mismatch
    // https://github.com/typelevel/cats/issues/3628
    relocate "cats.kernel", "shadow.kernel"
    relocate "org.hsqldb", "shadow.hsqldb"
    relocate "org.h2", "shadow.h2"
    configurations = [project.configurations.extraLibs]
}

task run(type: JavaExec, dependsOn: classes) {
    main = mainClassFile
    classpath sourceSets.main.runtimeClasspath
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-feature"]
}

dependencies {
    implementation group: "org.scala-lang", name: "scala-library", version: scalaVersionFull
    implementation group: "org.apache.spark", name: "spark-sql_${scalaVersion}", version: sparkVersion
    implementation group: "org.apache.spark", name: "spark-core_${scalaVersion}", version: sparkVersion
    implementation group: "org.apache.spark", name: "spark-mllib_${scalaVersion}", version: sparkVersion
    implementation group: "org.apache.spark", name: "spark-sql-kafka-0-10_${scalaVersion}", version: sparkVersion
    implementation group: "org.apache.spark", name: "spark-avro_${scalaVersion}", version: sparkVersion
    implementation group: "mysql", name: "mysql-connector-java", version: "8.0.30"
    // last update Nov 2019
    implementation group: "com.lihaoyi", name: "os-lib_${scalaVersion}", version: "0.8.1"
    implementation group: "za.co.absa", name: "abris_${scalaVersion}", version: "6.4.0"
    implementation group: "org.apache.avro", name: "avro", version: "1.10.2"
    implementation group: "org.scala-lang.modules", name: "scala-parser-combinators_${scalaVersion}", version: "1.1.2"
    extraLibs group: "io.circe", name: "circe-parser_${scalaVersion}", version: "0.14.1"
    extraLibs group: "io.circe", name: "circe-yaml_${scalaVersion}", version: "0.15.2"
    extraLibs group: "io.circe", name: "circe-generic_${scalaVersion}", version: "0.14.1"
    extraLibs group: "com.github.scopt", name: "scopt_${scalaVersion}", version: "4.1.0"
    extraLibs group: "com.typesafe", name: "config", version: "1.4.2"
    extraLibs group: "commons-io", name: "commons-io", version: "2.11.0"

    testImplementation group: "junit", name: "junit", version: "4.13.2"
    testImplementation group: "org.scalatestplus", name: "junit-4-12_${scalaVersion}", version: "3.2.2.0"
    testImplementation group: "com.holdenkarau", name: "spark-testing-base_${scalaVersion}", version: "3.4.0_1.4.3"
    testImplementation group: "org.mockito", name: "mockito-core", version: "4.8.0"
    testImplementation group: "org.scalatestplus", name: "scalatestplus-mockito_${scalaVersion}", version: "1.0.0-M2"
    // reed to use 3.0.1 since spark-testing-base is using this version
    testImplementation group: "org.scalatest", name: "scalatest_${scalaVersion}", version: "3.2.13"
    // required by DataFrameSuiteBase
    testImplementation group: "org.apache.spark", name: "spark-hive_${scalaVersion}", version: sparkVersion
    testImplementation group: "org.testcontainers", name: "elasticsearch", version: "1.17.3"
    testImplementation group: "org.testcontainers", name: "cassandra", version: "1.17.3"
    testImplementation group: "org.testcontainers", name: "neo4j", version: "1.17.3"
    testImplementation group: "org.apache.spark", name: "spark-avro_${scalaVersion}", version: "3.3.0"
    testImplementation (group: "com.fasterxml.jackson.module", name: "jackson-module-scala_${scalaVersion}", version: "2.13.4") {
        force = true
    }
    testImplementation (group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.13.4") {
        force = true
    }
    testImplementation (group: "com.fasterxml.jackson.core", name: "jackson-core", version: "2.13.4") {
        force = true
    }
    testImplementation group: "com.sksamuel.elastic4s", name: "elastic4s-client-esjava_${scalaVersion}", version: "8.4.1"
    testImplementation group: "com.typesafe.akka", name: "akka-testkit_${scalaVersion}", version: "2.5.32"

    configurations.implementation.extendsFrom(configurations.extraLibs)

}


jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task printVersion {
    println(version)
}

test {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

//scoverage {
//    check {
//        minimumRate = 0.80
//    }
//}
